@page "/reports"
@using Aurora.Interfaces.Models.Reporting
@using MediatR
@using Aurora.Frontend.Services
@using System.Security.Claims
@using Aurora.Features.Report.DeleteReport
@using Aurora.Features.Report.GetReports
@using Aurora.Features.Report.UnDeleteReport
@attribute [Authorize]

@inject IMediator Mediator
@inject NavigationManager NavManager
@inject IDialogService DialogService
@inject AuthenticationService AuthState

<MudCard>
    <MudCardHeader>
        <MudGrid>
            <MudItem xs="5" Class="d-flex flex-grow-1 gap-2">
                <MudPaper Class="flex-none" Outlined="false" Elevation="0">
                    <MudText Typo="Typo.h5">Reports</MudText>
                </MudPaper>
            </MudItem>
            <MudItem xs="7" Class="d-flex flex-grow-1 gap-2 justify-end">
                <MudPaper Class="flex-1 d-flex flex-grow-1 gap-2 justify-end" Outlined="false" Elevation="0">
                    <MudInput T="string" @bind-Value="_filterText" Immediate="true"></MudInput>
                </MudPaper>
                @if (_isAdmin)
                {
                    <MudPaper Outlined="false" Elevation="0">
                        <MudCheckBox T="bool" Checked="@_showAll" Label="Show All Users" CheckedChanged="@(OnShowAllClicked)"/>
                    </MudPaper>
                }
                <MudPaper Outlined="false" Elevation="0">
                    <MudCheckBox T="bool" Checked="@_showHidden" Label="Show Hidden" CheckedChanged="@(OnShowHiddenClicked)"/>
                </MudPaper>
            </MudItem>
        </MudGrid>
    </MudCardHeader>
    <MudCardContent>
        <MudDataGrid @ref="@_reportGrid" Items="@FilteredReports" Dense="true" ShowMenuIcon="false">
            <Columns>
                <PropertyColumn HeaderStyle="width: 40px;" CellStyle="width: 40px;" Property="x => x.Date" Format="MM/dd/yyyy"></PropertyColumn>
                <PropertyColumn HeaderStyle="width: 40px;" CellStyle="width: 40px;" Property="x => x.TimeDisplay" Title="Time"></PropertyColumn>
                <PropertyColumn HeaderStyle="width: 40px;" CellStyle="width: 40px;" Property="x => x.State" Title="State"></PropertyColumn>
                <PropertyColumn Property="x => x.Agency.Name" Title="Agency"></PropertyColumn>
                <PropertyColumn Property="x => x.IncidentType.Name" Title="Incident Type"></PropertyColumn>
                <PropertyColumn Property="x => x.Location.Address"></PropertyColumn>
                <TemplateColumn CellClass="d-flex justify-end" Filterable="false">
                    <CellTemplate>
                        <MudStack Row>
                            <MudButton Size="@Size.Small" Variant="@Variant.Text" Color="@Color.Primary" OnClick="@(() => StartedEditingItem(context.Item.Id))">Edit</MudButton>
                            @if (context.Item.DeletedOnUtc == null)
                            {
                                <MudButton Size="@Size.Small" Variant="@Variant.Text" Color="@Color.Primary" OnClick="@(() => DeleteItem(context.Item.Id))">Delete</MudButton>
                            }
                            else
                            {
                                <MudButton Size="@Size.Small" Variant="@Variant.Text" Color="@Color.Primary" OnClick="@(() => UnDeleteItem(context.Item.Id))">UnDelete</MudButton>
                            }
                        </MudStack>
                    </CellTemplate>
                </TemplateColumn>
            </Columns>
        </MudDataGrid>
    </MudCardContent>
</MudCard>

@code {
    private MudDataGrid<ReportRecord> _reportGrid;
    private IList<ReportRecord> _reports = new List<ReportRecord>();
    private bool _showHidden;
    private bool _showAll;
    private bool _isAdmin;

    private string? _filterText;

    protected override async Task OnInitializedAsync()
    {
        await RefreshReports();
        _isAdmin = AuthState.CurrentUser?.Claims.FirstOrDefault(_ => _.Type == ClaimTypes.Role)?.Value == "Administrator";
    }

    private IList<ReportRecord> FilteredReports
    {
        get
        {
            var query =
                _reports.Where(_ => _showHidden || _.DeletedOnUtc == null);
            if (!string.IsNullOrEmpty(_filterText))
            {
                query = query.Where(_ =>
                    _.Location.Address.Contains(_filterText, StringComparison.OrdinalIgnoreCase) ||
                    _.Agency.Name.Contains(_filterText, StringComparison.OrdinalIgnoreCase) ||
                    _.IncidentType.Name.Contains(_filterText, StringComparison.OrdinalIgnoreCase) ||
                    _.Date == null || _.Date.Value.ToString("MM/dd/yyyy").Contains(_filterText, StringComparison.OrdinalIgnoreCase) ||
                    _.TimeDisplay == null || _.TimeDisplay.Contains(_filterText, StringComparison.OrdinalIgnoreCase) ||
                    _.State == null || _.State.ToString().Contains(_filterText, StringComparison.OrdinalIgnoreCase)
                    );
            }

            return query.ToList();
        }
    }


    private async Task RefreshReports()
    {
        var userId = AuthState.CurrentUser?.Claims.FirstOrDefault(_ => _.Type == ClaimTypes.NameIdentifier)?.Value;
        if (userId != null)
        {
            var reportQuery = GetReportsQuery.Create(userId, _showHidden, _showAll);
            var reports = await Mediator.Send(reportQuery);
            if (reports.Success)
            {
                _reports = reports.Reports.OrderByDescending(_ => _.Date).ToList();
            }
        }
    }

    void StartedEditingItem(string id)
    {
        NavManager.NavigateTo($"/report/{id}");
    }

    async Task DeleteItem(string id)
    {
        var parameters = new DialogParameters
        {
            { "ContentText", "Do you want to Delete this report?" },
            { "ButtonText", "Yes" }
        };

        var dialogResult = await DialogService.ShowAsync<DialogConfirm>("Confirm", parameters);
        var result = await dialogResult.Result;
        if (!result.Cancelled && bool.TryParse(result.Data.ToString(), out var resultBool))
        {
            var command = new DeleteReportCommand(id);
            var results = await Mediator.Send(command);

            if (results.Success)
                await RefreshReports();
        }
    }

    async Task UnDeleteItem(string id)
    {
        var parameters = new DialogParameters
        {
            { "ContentText", "Do you want to Un-Delete this report?" },
            { "ButtonText", "Yes" }
        };

        var dialogResult = await DialogService.ShowAsync<DialogConfirm>("Confirm", parameters);
        var result = await dialogResult.Result;
        if (!result.Cancelled && bool.TryParse(result.Data.ToString(), out var resultbool))
        {
            var command = new UnDeleteReportCommand(id);
            var results = await Mediator.Send(command);

            if (results.Success)
                await RefreshReports();
        }
    }

    private async Task OnShowHiddenClicked()
    {
        _showHidden = !_showHidden;

        await RefreshReports();
    }

    private async Task OnShowAllClicked()
    {
        _showAll = !_showAll;

        await RefreshReports();
    }

}