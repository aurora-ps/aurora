@page "/reports"
@inject MediatR.IMediator Mediator
@inject NavigationManager NavManager
@inject IDialogService DialogService
@using Aurora.Interfaces.Models.Reporting
@using Aurora.Features.Report.GetReports
@using Aurora.Features.Report.UnDeleteReport
@using Aurora.Features.Report.DeleteReport

<MudCard>
    <MudCardHeader>
        <MudGrid>
            <MudItem xs="9"><MudText Typo="Typo.h5">Reports</MudText></MudItem>
            <MudItem xs="3"  Class="d-flex justify-end"><MudCheckBox T="bool" Checked="@_showHidden" Label="Show Hidden" CheckedChanged="@(OnShowHiddenClicked)"></MudCheckBox></MudItem>
        </MudGrid>
    </MudCardHeader>
    <MudCardContent>
        <MudDataGrid  Items="@_reports" Filterable="true" SortMode="SortMode.Multiple" Groupable="false" Dense="true">
            <Columns>
                <PropertyColumn Property="x => x.Date" Format="MM/dd/yyyy"></PropertyColumn>
                <PropertyColumn Property="x => x.TimeDisplay"></PropertyColumn>
                <PropertyColumn Property="x => x.Agency.Name" Title="Agency"></PropertyColumn>
                <PropertyColumn Property="x => x.IncidentType.Name" Title="Incident Type"></PropertyColumn>
                <PropertyColumn Property="x => x.Location.Address"></PropertyColumn>
                <TemplateColumn CellClass="d-flex justify-end">
                    <CellTemplate>
                        <MudStack Row>
                            <MudButton Size="@Size.Small" Variant="@Variant.Filled" Color="@Color.Primary" OnClick="@(()=>StartedEditingItem(context.Item.Id))">Edit</MudButton>
                            @if (context.Item.DeletedOnUtc == null)
                            {
                                <MudButton Size="@Size.Small" Variant="@Variant.Filled" Color="@Color.Primary" OnClick="@(()=>DeleteItem(context.Item.Id))">Delete</MudButton>
                            }
                            else
                            {
                                <MudButton Size="@Size.Small" Variant="@Variant.Filled" Color="@Color.Primary" OnClick="@(()=>UnDeleteItem(context.Item.Id))">UnDelete</MudButton>
                            }
                        </MudStack>
                    </CellTemplate>
                </TemplateColumn>
            </Columns>
        </MudDataGrid>
    </MudCardContent>
</MudCard>

@code {
    private IList<ReportRecord> _reports = new List<ReportRecord>();
    private bool _showHidden;

    protected override async Task OnInitializedAsync()
    {
        await RefreshReports();
    }

    private async Task RefreshReports()
    {
        var reports = await Mediator.Send(new GetReportsQuery(_showHidden));
        if (reports.Success)
        {
            _reports = reports.Reports;

        }
    }

    void StartedEditingItem(string id)
    {
        NavManager.NavigateTo($"/report/{id}");
    }

    async Task DeleteItem(string id)
    {
        var parameters = new DialogParameters
        {
            { "ContentText", "Do you want to Delete this report?" },
            { "ButtonText", "Yes" }
        };

        var dialogResult = await DialogService.ShowAsync<DialogConfirm>("Confirm", parameters);
        var result = await dialogResult.Result;
        if (!result.Cancelled && bool.TryParse(result.Data.ToString(), out bool resultBool))
        {
            var command = new DeleteReportCommand(id);
            var results = await Mediator.Send(command);

            if (results.Success)
                await RefreshReports();
        }

    }

    async Task UnDeleteItem(string id)
    {
        var parameters = new DialogParameters
        {
            { "ContentText", "Do you want to Un-Delete this report?" },
            { "ButtonText", "Yes" }
        };

        var dialogResult = await DialogService.ShowAsync<DialogConfirm>("Confirm", parameters);
        var result = await dialogResult.Result;
        if (!result.Cancelled && bool.TryParse(result.Data.ToString(), out bool resultbool))
        {
            var command = new UnDeleteReportCommand(id);
            var results = await Mediator.Send(command);

            if (results.Success)
                await RefreshReports();
        }

    }

    private async Task OnShowHiddenClicked()
    {
        _showHidden = !_showHidden;
        await RefreshReports();
    }

}