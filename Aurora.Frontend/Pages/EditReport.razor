@page "/report/{recordId?}"
@inject MediatR.IMediator Mediator
@using Aurora.Interfaces.Models.Reporting
@using Aurora.Features.Agency.GetAgencies
@using Aurora.Features.Report.SaveReport

<MudForm @ref="_form" @bind-IsValid="@_success" @bind-Errors="@_errors" ReadOnly="false">
    <MudList Clickable="false" Dense="true" DisableGutters="true">
        <MudListItem>
            <MudGrid Spacing="1">
                <MudItem xs="12">
                    <MudText Typo="Typo.h5" GutterBottom="true">Create Report</MudText>
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudSelect T="Agency" Value="_report.Agency" ValueChanged="value => HandleAgencyValueChanged(_report, value)" Variant="Variant.Filled" Label="Agency" AnchorOrigin="Origin.BottomCenter" Required="true" RequiredError="Agency must be selected">
                        @foreach (var agency in _agencies)
                        {
                            <MudSelectItem Value="@agency" />
                        }
                    </MudSelect>
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudSelect T="IncidentType" Value="_report.IncidentType" ValueChanged="value => HandleIncidentTypeChanged(_report, value)" Variant="Variant.Filled" Label="Incident Type" AnchorOrigin="Origin.BottomCenter" Required="true" RequiredError="Incient Type must be selected" Disabled="!_incidentTypes.Any()">
                        @foreach (var incidentType in _incidentTypes)
                        {
                            <MudSelectItem Value="@incidentType" />
                        }
                    </MudSelect>
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudDatePicker Label="Date" @bind-Date="_report.Date" Editable="true" Required="false" />
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudTimePicker Label="Time" @bind-Time="_report.Time" Editable="true" Required="_report?.IncidentType?.RequiresTime ?? false" />
                </MudItem>

                <MudItem xs="12" md="6">
                    <MudNumericField Immediate="false" Label="Miles Driven" Format="N1" T="double?" @bind-Value="_report.Miles" />
                </MudItem>
            </MudGrid>
        </MudListItem>
        @if (this._report?.IncidentType?.CollectLocation ?? false)
        {
            <MudDivider />
            <MudListItem>
                <MudGrid Spacing="1">
                    @* Location Section *@
                    <MudItem xs="12">
                        <MudText Typo="Typo.h5" GutterBottom="false">Location</MudText>
                    </MudItem>
                    <MudItem xs="12" md="6">
                        <MudTextField Label="Address" @bind-Value="_report.Location.Address" Required="true" />
                    </MudItem>
                    <MudItem xs="12" md="6">
                        <MudTextField Label="City" @bind-Value="_report.Location.City" Required="true" />
                    </MudItem>
                    <MudItem xs="12" md="6">
                        <MudTextField Label="State" @bind-Value="_report.Location.State" Required="true" />
                    </MudItem>
                    <MudItem xs="12" md="6">
                        <MudTextField Label="Zip" @bind-Value="_report.Location.Zip" Required="false" />
                    </MudItem>

                </MudGrid>
            </MudListItem>
        }
        @if (this._report?.IncidentType?.CollectPerson ?? false)
        {
            <MudDivider />
            <MudListItem>
                <MudGrid Spacing="1">
                    @* People Section *@
                    <MudItem xs="8"><MudText Typo="Typo.h5" GutterBottom="false">People</MudText></MudItem>
                    <MudItem xs="4" Class="d-flex justify-end"><MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Person" Color="Color.Primary" @onclick="AddPerson">Add Person</MudButton></MudItem>
                    <MudItem xs="12">
                        <MudExpansionPanels MultiExpansion="true">
                            @foreach (ReportPerson person in _report.People)
                            {
                                <MudExpansionPanel IsInitiallyExpanded="true" Text="@person.ToString()">
                                    <MudGrid Spacing="1">
                                        <MudItem xs="6">
                                            <MudSelect @bind-Value="person.Type" Variant="Variant.Filled" Label="Type" AnchorOrigin="Origin.BottomCenter" RequiredError="Type must be selected">
                                                @foreach (PersonType personType in Enum.GetValues(typeof(PersonType)))
                                                {
                                                    <MudSelectItem Value="personType">@personType</MudSelectItem>
                                                }
                                            </MudSelect>
                                        </MudItem>
                                        <MudItem xs="6">
                                            @if (person.Type == PersonType.Victim)
                                            {
                                                <MudDatePicker Label="Date of Birth" @bind-Date="person.DateOfBirth" Editable="true" Required="false" />
                                            }
                                        </MudItem>
                                        <MudItem xs="12" md="6">
                                            <MudTextField Label="First Name" @bind-Value="person.FirstName" Required="true" />
                                        </MudItem>
                                        <MudItem xs="12" md="6">
                                            <MudTextField Label="Last Name" @bind-Value="person.LastName" Required="true" />
                                        </MudItem>
                                        @if (person.AllowPhoneNumber())
                                        {
                                            <MudItem xs="12"><MudText Typo="Typo.h6" GutterBottom="false">Contact Information</MudText></MudItem>
                                            //<MudItem xs="6" md="3"><MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="AddPerson">Add Phone</MudButton></MudItem>
                                            //<MudItem xs="6" md="3"><MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="AddPerson">Add Address</MudButton></MudItem>
                                            //For now we are just going to support a single phone number
                                            <MudItem xs="12" md="6">
                                                <MudTextField Label="Phone Number" @bind-Value="person.PhoneNumber.Number" Required="true" />
                                            </MudItem>
                                            <MudItem xs="12" md="6">
                                                <MudSelect @bind-Value="person.PhoneNumber.Type" Variant="Variant.Filled" Label="Type" AnchorOrigin="Origin.BottomCenter" RequiredError="Type must be selected">
                                                    @foreach (PhoneNumberTypeEnum phoneNumberType in Enum.GetValues(typeof(PhoneNumberTypeEnum)))
                                                    {
                                                        <MudSelectItem Value="phoneNumberType">@phoneNumberType</MudSelectItem>
                                                    }
                                                </MudSelect>
                                            </MudItem>
                                        }
                                        @if (person.AllowAddress())
                                        {
                                            <MudItem xs="12" md="6">
                                                <MudTextField Label="Address" @bind-Value="person.Location.Address" Required="true" />
                                            </MudItem>
                                            <MudItem xs="12" md="6">
                                                <MudTextField Label="City" @bind-Value="person.Location.City" Required="true" />
                                            </MudItem>
                                            <MudItem xs="12" md="6">
                                                <MudTextField Label="State" @bind-Value="person.Location.State" Required="true" />
                                            </MudItem>
                                            <MudItem xs="12" md="6">
                                                <MudTextField Label="Zip" @bind-Value="person.Location.Zip" Required="false" />
                                            </MudItem>
                                        }
                                    </MudGrid>
                                </MudExpansionPanel>
                            }
                        </MudExpansionPanels>
                    </MudItem>
                </MudGrid>
            </MudListItem>
        }
        <MudDivider />
        <MudListItem>
            <MudItem xs="8"><MudText Typo="Typo.h5" GutterBottom="false">Narrative</MudText></MudItem>
            <MudItem xs="12">
                <MudTextField T="string" @bind-Value="@_report.Narrative" Lines="10" Variant="Variant.Filled" Required="true"></MudTextField>
            </MudItem>
        </MudListItem>
    </MudList>
    <MudButton Variant="Variant.Filled" Color="Color.Primary" DisableElevation="true" OnClick="@(SaveForm)">@SubmitButtonText</MudButton>
</MudForm>

<MudCard class="pa-4">
    <MudHidden Breakpoint="Breakpoint.Xs" Invert="true"><MudCard class="pa-1">XS</MudCard></MudHidden>
    <MudHidden Breakpoint="Breakpoint.Sm" Invert="true"><MudCard class="pa-1">SM</MudCard></MudHidden>
    <MudHidden Breakpoint="Breakpoint.Md" Invert="true"><MudCard class="pa-1">MD</MudCard></MudHidden>
    <MudHidden Breakpoint="Breakpoint.Lg" Invert="true"><MudCard class="pa-1">LG</MudCard></MudHidden>
    <MudHidden Breakpoint="Breakpoint.Xl" Invert="true"><MudCard class="pa-1">XL</MudCard></MudHidden>
    <MudHidden Breakpoint="Breakpoint.Xxl" Invert="true"><MudCard class="pa-1">XXL</MudCard></MudHidden>
</MudCard>
@code {

    [Parameter]
    public string? recordId { get; set; }

    bool _success;
    string[] _errors = { };
    MudForm _form;

    Report _report = new();
    List<Agency> _agencies;
    List<IncidentType> _incidentTypes = new List<IncidentType>();

    protected override async Task OnInitializedAsync()
    {
        var agencies = await Mediator.Send(new GetAgenciesQuery());
        _agencies = agencies.Agencies.OrderBy(_ => _.Name).ToList();
    }




    private void AddPerson()
    {
        var newPerson = new ReportPerson()
        {
            Type = this._report.People.Count == 0 ? PersonType.Victim : PersonType.Other,
            PhoneNumber = new PhoneNumber()
        };

        this._report.People.Add(newPerson);
        StateHasChanged();
    }

    private void HandleAgencyValueChanged(Report report, Agency value)
    {
        report.Agency = value;
        _incidentTypes = value.IncidentTypes.OrderBy(_ => _.Name).ToList();
    }

    private void HandleIncidentTypeChanged(Report report, IncidentType value)
    {
        report.IncidentType = value;
        if (report.IncidentType.CollectPerson && !report.People.Any())
        {
            AddPerson();
        }
    }

    private string SubmitButtonText
    {
        get
        {
            switch (_saveState)
            {
                case SaveStateEnum.Saving:
                    return "Saving...";
                case SaveStateEnum.Saved:
                    return "Saved";
                default:
                    return "Save";
            }
        }
    }

    private SaveStateEnum _saveState = SaveStateEnum.Unsaved;

    private enum SaveStateEnum
    {
        Saving,
        Saved,
        Unsaved
    }

    private async Task SaveForm()
    {
        await _form.Validate();
        if (_form.IsValid)
        {
            _saveState = SaveStateEnum.Saving;

            var command = new SaveReportCommand()
            {
                Id = recordId ?? Guid.NewGuid().ToString(),
                Agency = new AgencyRecord() { Id = _report.Agency.Id },
                IncidentType = new IncidentTypeRecord() { Id = _report.IncidentType.Id },
                Narrative = _report.Narrative,
                Date = _report.Date,
                Time = _report.Time,
                Location = new LocationRecord()
                {
                    Address = _report.Location.Address,
                    City = _report.Location.City,
                    State = _report.Location.State,
                    Zip = _report.Location.Zip
                },
                Miles = _report.Miles,
                People = _report.People.Select(_ => new ReportPersonRecord
                {
                    FirstName = _.FirstName,
                    LastName = _.LastName,
                    Type = _.Type,
                    PhoneNumber = _.PhoneNumber == null ? null : new PhoneNumberRecord
                    {
                        Number = _.PhoneNumber.Number,
                        Type = _.PhoneNumber.Type
                    }
                }).ToList()
            };

            var result = await Mediator.Send(command);
        }
    }

}