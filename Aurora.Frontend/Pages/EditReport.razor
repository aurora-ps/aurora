@page "/report/{recordId?}"
@inject MediatR.IMediator Mediator
@inject IDialogService DialogService
@inject AuthenticationService AuthService

@using Aurora.Interfaces.Models.Reporting
@using Aurora.Features.Agency.GetAgencies
@using Aurora.Features.Report.GetReport
@using Aurora.Features.Report.SaveReport
@using System.Text
@using Aurora.Frontend.ExtensionMethods
@using Aurora.Frontend.Services
@using System.Security.Claims

<MudTabs>
    <MudTabPanel Text="Report">
        <MudForm @ref="_form" @bind-IsValid="@_success" @bind-Errors="@_errors" ReadOnly="false">
            <MudList Clickable="false" Dense="true" DisableGutters="true">
                <MudListItem>
                    <MudGrid Spacing="1">
                        <MudItem xs="12">
                            <MudText Typo="Typo.h5" GutterBottom="true">@(string.IsNullOrEmpty(@recordId) ? "Create Report" : "Edit Report")</MudText>
                        </MudItem>
                        <MudItem xs="12" sm="6" md="4">
                            <MudSelect T="AgencyRecord" Value="@_report.Agency" ValueChanged="value => HandleAgencyValueChanged(_report, value)" Variant="Variant.Text" Label="Agency" AnchorOrigin="Origin.BottomCenter" Required="true" RequiredError="Agency must be selected" Disabled="!_agencies.Any()">
                                @foreach (var agency in _agencies)
                                {
                                    <MudSelectItem Value="@agency" />
                                }
                            </MudSelect>
                        </MudItem>
                        <MudItem xs="12" sm="6" md="4">
                            <MudSelect T="IncidentTypeRecord" Value="_report.IncidentType" ValueChanged="value => HandleIncidentTypeChanged(_report, value)" Variant="Variant.Text" Label="Incident Type" AnchorOrigin="Origin.BottomCenter" Required="true" RequiredError="Incient Type must be selected" Disabled="!_incidentTypes.Any()">
                                @foreach (var incidentType in _incidentTypes)
                                {
                                    <MudSelectItem Value="@incidentType" />
                                }
                            </MudSelect>
                        </MudItem>
                        <MudItem xs="12" sm="6" md="4">
                            <MudSelect T="ReportState" Value="CurrentReportState" ValueChanged="value => HandleReportStateChanged(_report, value)" Variant="Variant.Text" Label="Report State" AnchorOrigin="Origin.BottomCenter" Required="true" RequiredError="Incient Type must be selected" Disabled="!_reportStates.Any()">
                                @foreach (var reportState in _reportStates)
                                {
                                    <MudSelectItem Value="@reportState" />
                                }
                            </MudSelect>
                        </MudItem>
                        <MudItem xs="6" sm="3">
                            <MudDatePicker Label="Date" @bind-Date="_incidentDate" Editable="true" Required="false" />
                        </MudItem>
                        @if ((_report?.IncidentType?.CollectTime ?? false) || (_report?.IncidentType?.RequiresTime ?? false))
                        {

                            <MudItem xs="6" sm="3">
                                <MudTimePicker Label="Time" @bind-Time="_incidentTime" Editable="true" Required="_report?.IncidentType?.RequiresTime ?? false" />
                            </MudItem>
                            <MudItem xs="6" sm="3">
                                <MudDatePicker Label="Cleared Date" @bind-Date="_clearedDate" MinDate="@_incidentDate" Editable="true" Required="_report?.IncidentType?.RequiresTime ?? false" />
                            </MudItem>
                            <MudItem xs="6" sm="3">
                                <MudTimePicker Label="Cleared Time" @bind-Time="_clearedTime" Editable="true" Required="_report?.IncidentType?.RequiresTime ?? false" />
                            </MudItem>
                        }

                        <MudItem xs="12" sm="3">
                            <MudNumericField Immediate="false" Label="Miles Driven" Format="N1" T="double?" @bind-Value="_report.Miles" />
                        </MudItem>
                    </MudGrid>
                </MudListItem>
                @if (this._report?.IncidentType?.CollectLocation ?? false)
                {
                    <MudDivider />
                    <MudListItem>
                        <MudGrid Spacing="1">
                            @* Location Section *@
                            <MudItem xs="12">
                                <MudText Typo="Typo.h5" GutterBottom="false">Location</MudText>
                            </MudItem>
                            <MudItem xs="12" md="6" lg="4">
                                <MudTextField Label="Address" @bind-Value="_report.Location.Address" Required="true" />
                            </MudItem>
                            <MudItem xs="12" md="6" lg="4">
                                <MudTextField Label="City" @bind-Value="_report.Location.City" Required="true" />
                            </MudItem>
                            <MudItem xs="12" md="6" lg="2">
                                <MudTextField Label="State" @bind-Value="_report.Location.State" Required="true" />
                            </MudItem>
                            <MudItem xs="12" md="6" lg="2">
                                <MudTextField Label="Zip" @bind-Value="_report.Location.Zip" Required="false" />
                            </MudItem>

                        </MudGrid>
                    </MudListItem>
                }
                @if (this._report?.IncidentType?.CollectPerson ?? false)
                {
                    <MudDivider />
                    <MudListItem>
                        <MudGrid Spacing="1">
                            @* People Section *@
                            <MudItem xs="8"><MudText Typo="Typo.h5" GutterBottom="false">People</MudText></MudItem>
                            <MudItem xs="4" Class="d-flex justify-end"><MudButton Variant="Variant.Text" StartIcon="@Icons.Material.Filled.Person" Color="Color.Primary" @onclick="AddPerson">Add Person</MudButton></MudItem>
                            <MudItem xs="12">
                                <MudExpansionPanels MultiExpansion="true">
                                    @foreach (ReportPersonRecord person in _report.People)
                                    {
                                        <MudExpansionPanel IsInitiallyExpanded="true">
                                            <TitleContent><MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="@(() => RemovePerson(person.Id))"></MudIconButton> @person.ToString()</TitleContent>
                                            <ChildContent>
                                                <MudGrid Spacing="1">
                                                    <MudItem xs="6" lg="2">
                                                        <MudSelect T="PersonType" @bind-Value="person.Type" Variant="Variant.Text" Label="Type" AnchorOrigin="Origin.BottomCenter" RequiredError="Type must be selected">
                                                            @foreach (PersonType personType in Enum.GetValues(typeof(PersonType)))
                                                            {
                                                                <MudSelectItem Value="personType">@personType</MudSelectItem>
                                                            }
                                                        </MudSelect>
                                                    </MudItem>
                                                    <MudItem xs="12" md="6" lg="4">
                                                        <MudTextField Label="First Name" @bind-Value="person.FirstName" Required="false" />
                                                    </MudItem>
                                                    <MudItem xs="12" md="6" lg="4">
                                                        <MudTextField Label="Last Name" @bind-Value="person.LastName" Required="false" />
                                                    </MudItem>
                                                    <MudItem xs="6" lg="2">
                                                        @if (person.Type == PersonType.Victim)
                                                        {
                                                            <MudDatePicker Label="Date of Birth" @bind-Date="person.DateOfBirth" Editable="true" Required="false" />
                                                        }
                                                    </MudItem>

                                                    <MudItem xs="12">
                                                        <MudGrid>
                                                            <MudItem xs="6"><MudText Typo="Typo.h6" GutterBottom="false">Contact Information</MudText></MudItem>
                                                            <MudItem xs="6"><MudCheckBox Label="Request Follow-up?" @bind-Checked="@person.RequestFollowup"></MudCheckBox></MudItem>        
                                                        </MudGrid>
                                                    </MudItem>
                                                    
                                                    <MudItem xs="12" md="6">
                                                        <MudTextField Label="Phone Number" @bind-Value="person.PhoneNumber.Number" Required="false" />
                                                    </MudItem>
                                                    <MudItem xs="12" md="6">
                                                        <MudSelect @bind-Value="person.PhoneNumber.Type" Variant="Variant.Text" Label="Type" AnchorOrigin="Origin.BottomCenter" RequiredError="Type must be selected">
                                                            @foreach (PhoneNumberTypeEnum phoneNumberType in Enum.GetValues(typeof(PhoneNumberTypeEnum)))
                                                            {
                                                                <MudSelectItem Value="phoneNumberType">@phoneNumberType</MudSelectItem>
                                                            }
                                                        </MudSelect>
                                                    </MudItem>

                                                    <MudItem xs="12" md="6" lg="4">
                                                        <MudTextField Label="Address" @bind-Value="person.Location.Address" Required="false" />
                                                    </MudItem>
                                                    <MudItem xs="12" md="6" lg="4">
                                                        <MudTextField Label="City" @bind-Value="person.Location.City" Required="false" />
                                                    </MudItem>
                                                    <MudItem xs="12" md="6" lg="2">
                                                        <MudTextField Label="State" @bind-Value="person.Location.State" Required="false" />
                                                    </MudItem>
                                                    <MudItem xs="12" md="6" lg="2">
                                                        <MudTextField Label="Zip" @bind-Value="person.Location.Zip" Required="false" />
                                                    </MudItem>
                                                </MudGrid>
                                            </ChildContent>
                                        </MudExpansionPanel>
                                    }
                                </MudExpansionPanels>
                            </MudItem>
                        </MudGrid>
                    </MudListItem>
                }
                <MudDivider />
                <MudListItem>
                    <MudGrid Spacing="1">
                        <MudItem xs="12"><MudText Typo="Typo.h5" GutterBottom="false">Ministry</MudText></MudItem>
                        <MudItem xs="12" sm="6" md="4" lg="3">
                            <MudNumericField @bind-Value="@_report.MinistryOpportunity.CounselingOpportunities" Label="Counseling Opportunities"></MudNumericField>
                        </MudItem>
                        <MudItem xs="12" sm="6" md="4" lg="3">
                            <MudNumericField @bind-Value="@_report.MinistryOpportunity.GospelPresentations" Label="Gospel Presentations"></MudNumericField>
                        </MudItem>
                        <MudItem xs="12" sm="6" md="4" lg="3">
                            <MudNumericField @bind-Value="@_report.MinistryOpportunity.ProfessionsOfFaith" Label="Professions of Faith"></MudNumericField>
                        </MudItem>
                        <MudItem xs="12" sm="6" md="4" lg="3">
                            <MudNumericField @bind-Value="@_report.MinistryOpportunity.BibleStudies" Label="Bible Studies"></MudNumericField>
                        </MudItem>
                        <MudItem xs="12" sm="6" md="4" lg="3">
                            <MudNumericField @bind-Value="@_report.MinistryOpportunity.Baptisms" Label="Baptisims"></MudNumericField>
                        </MudItem>
                    </MudGrid>
                </MudListItem>
                <MudDivider />
                <MudListItem>
                    <MudItem xs="8"><MudText Typo="Typo.h5" GutterBottom="false">Narrative</MudText></MudItem>
                    <MudItem xs="12">
                        <MudTextField T="string" @bind-Value="@_report.Narrative" Lines="10" Variant="Variant.Filled" Required="true"></MudTextField>
                    </MudItem>
                </MudListItem>
            </MudList>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" DisableElevation="true" OnClick="@(SaveForm)" Disabled="_saveState == SaveStateEnum.Saving">@SubmitButtonText</MudButton>
        </MudForm>
    </MudTabPanel>
    <MudTabPanel Text="Report Summary">
        <MudGrid>
            <MudItem xs="12">
                <MudTextField T="string" Text="@_reportText" Lines="40" Variant="Variant.Filled"></MudTextField>
            </MudItem>
        </MudGrid>
    </MudTabPanel>
</MudTabs>

@*<MudCard class="pa-4">
        <MudHidden Breakpoint="Breakpoint.Xs" Invert="true"><MudCard class="pa-1">XS</MudCard></MudHidden>
        <MudHidden Breakpoint="Breakpoint.Sm" Invert="true"><MudCard class="pa-1">SM</MudCard></MudHidden>
        <MudHidden Breakpoint="Breakpoint.Md" Invert="true"><MudCard class="pa-1">MD</MudCard></MudHidden>
        <MudHidden Breakpoint="Breakpoint.Lg" Invert="true"><MudCard class="pa-1">LG</MudCard></MudHidden>
        <MudHidden Breakpoint="Breakpoint.Xl" Invert="true"><MudCard class="pa-1">XL</MudCard></MudHidden>
        <MudHidden Breakpoint="Breakpoint.Xxl" Invert="true"><MudCard class="pa-1">XXL</MudCard></MudHidden>
    </MudCard>*@
@code {

    [Parameter]
    public string? recordId { get; set; }

    bool _success;
    string[] _errors = { };
    MudForm _form;

    IReportRecord _report = new ReportRecord();

    List<AgencyRecord> _agencies = new();
    List<IncidentTypeRecord> _incidentTypes = new();
    List<ReportState> _reportStates = GetReportStates();

    protected override async Task OnInitializedAsync()
    {
        var agencies = await Mediator.Send(new GetAgenciesQuery());
        _agencies = agencies.Agencies.OrderBy(_ => _.Name).ToList();

        if (!string.IsNullOrEmpty(recordId))
        {
            var record = await Mediator.Send(new GetReportQuery(recordId));
            if ((record?.Success ?? false) && record.Report != null)
            {
                _report = record.Report;
                _incidentTypes = _agencies.FirstOrDefault(_ => _.Id == _report.Agency.Id)?.IncidentTypes.Select(_ => _).OrderBy(_ => _.Name).ToList() ?? new List<IncidentTypeRecord>();
                SetReportDates(_report.Date, _report.ClearedDate);
                //_incidentDate = record.Report.Date;
                //_clearedDate = record.Report.ClearedDate;
            }
        }
    }

    private void AddPerson()
    {
        var newPerson = new ReportPersonRecord()
        {
            Type = this._report.People.Count == 0 ? PersonType.Victim : PersonType.Other,
            PhoneNumber = new PhoneNumberRecord(),
            Location = new LocationRecord()
        };

        this._report.People.Add(newPerson);
        //StateHasChanged();
    }

    private void HandleAgencyValueChanged(IReportRecord report, AgencyRecord value)
    {
        report.Agency = value;
        _incidentTypes = value.IncidentTypes.Select(_ => _).OrderBy(_ => _.Name).ToList();
    }

    private void HandleIncidentTypeChanged(IReportRecord report, IncidentTypeRecord value)
    {
        report.IncidentType = value;
        if (report.IncidentType.CollectPerson && !report.People.Any())
        {
            AddPerson();
        }
    }

    private void RemovePerson(int personId)
    {
        var person = this._report.People.FirstOrDefault(_ => _.Id == personId);
        if (person != null)
        {
            this._report.People.Remove(person);
        }
    }

    private string SubmitButtonText
    {
        get
        {
            switch (_saveState)
            {
                case SaveStateEnum.Saving:
                    return "Saving...";
                case SaveStateEnum.Saved:
                    return "Saved";
                default:
                    return "Save";
            }
        }
    }

    private SaveStateEnum _saveState = SaveStateEnum.Unsaved;

    private enum SaveStateEnum
    {
        Saving,
        Saved,
        Unsaved
    }

    private async Task SaveForm()
    {
        await _form.Validate();
        var user = AuthService.CurrentUser;

        if(user == null)
            throw new Exception("User not found");

        var userId = user.Claims.FirstOrDefault(_ => _.Type == ClaimTypes.NameIdentifier)?.Value;
        if (string.IsNullOrEmpty(userId))
            throw new Exception("User not found");

        if (_form.IsValid)
        {
            _saveState = SaveStateEnum.Saving;

            var command = SaveReportCommand.Create(new ReportRecord
            {
                UserId = userId,
                Id = recordId ?? Guid.NewGuid().ToString(),
                Agency = new AgencyRecord() { Id = _report.Agency.Id },
                IncidentType = new IncidentTypeRecord() { Id = _report.IncidentType.Id },
                Narrative = _report.Narrative,
                Date = GetIncidentDateTime(),
                ClearedDate = GetClearedDateTime(),
                State = _report.State,
                Location = new LocationRecord()
                {
                    Address = _report.Location.Address,
                    City = _report.Location.City,
                    State = _report.Location.State,
                    Zip = _report.Location.Zip
                },
                Miles = _report.Miles,
                MinistryOpportunity = _report.MinistryOpportunity,
                People = _report.People.Select(_ => new ReportPersonRecord
                {
                    Id = _.Id,
                    FirstName = _.FirstName,
                    LastName = _.LastName,
                    Type = _.Type,
                    DateOfBirth = _.DateOfBirth,
                    PhoneNumber = _.PhoneNumber == null ? null : new PhoneNumberRecord
                    {
                        Number = _.PhoneNumber.Number,
                        Type = _.PhoneNumber.Type
                    },
                    Location = _.Location == null ? null : new LocationRecord
                    {
                        Address = _.Location.Address,
                        City = _.Location.City,
                        State = _.Location.State,
                        Zip = _.Location.Zip
                    },
                    RequestFollowup = _.RequestFollowup
                }).ToList()
            });

            var result = await Mediator.Send(command);

            if (result.IsSuccess)
            {
                _report = await GetReport(result.ReportRecord.Id);
                _saveState = SaveStateEnum.Saved;
                _success = true;
                _errors = new string[] { };
                StateHasChanged();
            }
            else
            {
                _saveState = SaveStateEnum.Unsaved;
                _success = false;
                StateHasChanged();
            }
        }
    }

    private async Task<ReportRecord> GetReport(string reportId)
    {
        var report = await Mediator.Send(new GetReportQuery(reportId));
        if (report?.Success ?? false)
        {
            return report.Report;
        }
        else
        {
            return new ReportRecord();
        }

    }

    private bool AllowPhoneNumber(ReportPersonRecord person)
    {
        return true;
    }

    private bool AllowAddress(ReportPersonRecord person) => true;
    private string _reportText
    {
        get
        {
            var sb = new StringBuilder();
            sb.AppendLine($"Agency: {_report.Agency.Name}");
            sb.AppendLine($"Incident Type: {_report.IncidentType.Name}");

            if (_report.Date.HasValue)
                sb.AppendLine($"Date: {_report.Date.FormattedDateTime()}");
            if (_report.ClearedDate.HasValue && _report.Date.HasValue)
            {
                AppendClearedTime(sb);
            }
            sb.AppendLine($"Miles Driven: {_report.Miles}");

            AppendLocation(sb, _report.Location);

            AppendPeople(sb, _report.People);

            sb.AppendLine($"Narrative: {_report.Narrative}");

            AppendMinistry(sb, _report.MinistryOpportunity);

            if (_report.People.Any(_ => _.RequestFollowup))
            {
                sb.AppendLine();
                sb.AppendLine("--------------------------------------------------------------------");
                sb.AppendLine("                  Follow-up Requested");
                sb.AppendLine("--------------------------------------------------------------------");

                _report.People.Where(_ => _.RequestFollowup).ToList().ForEach(_ =>
                {
                    sb.AppendLine($"Name: {_.FirstName} {_.LastName}");
                    sb.AppendLine($"Type: {_.Type}");
                    if(!string.IsNullOrEmpty(_.PhoneNumber?.Number))
                        sb.AppendLine($"Phone Number: {_.PhoneNumber.Number} [{_.PhoneNumber.Type.ToString()}]");

                    AppendLocation(sb, _.Location);
                });

            }

            return sb.ToString();

        }
    }

    private void AppendMinistry(StringBuilder sb, MinistryOpportunityRecord ministryOpportunity)
    {
        if(ministryOpportunity == null)
        {
            return;
        }

        var ministrySb = new StringBuilder();

        if (ministryOpportunity.CounselingOpportunities is > 0)
            ministrySb.AppendLine($"Counseling: {ministryOpportunity.CounselingOpportunities.Value}");

        if (ministryOpportunity.BibleStudies is > 0)
            ministrySb.AppendLine($"Bible Studies: {ministryOpportunity.BibleStudies.Value}");

        if (ministryOpportunity.GospelPresentations is > 0)
            ministrySb.AppendLine($"Gospel Presentations: {ministryOpportunity.GospelPresentations.Value}");

        if (ministryOpportunity.ProfessionsOfFaith > 0)
            ministrySb.AppendLine($"Professions of Faith: {ministryOpportunity.ProfessionsOfFaith.Value}");

        if (ministryOpportunity.Baptisms > 0)
            ministrySb.AppendLine($"Baptisms: {ministryOpportunity.Baptisms.Value}");

        if(ministrySb.Length == 0)
            return;

        sb.AppendLine();
        sb.AppendLine("----------------------------------------------------");
        sb.AppendLine("                Ministry Report");
        sb.AppendLine("----------------------------------------------------");
        sb.Append(ministrySb.ToString());

    }

    private void AppendPeople(StringBuilder sb, IList<ReportPersonRecord>? reportPeople)
    {
        if (reportPeople == null || !reportPeople.Any())
        {
            return;
        }

        sb.AppendLine("----------------------------------------------------");
        sb.AppendLine("                  People");
        sb.AppendLine("----------------------------------------------------");

        foreach (var person in reportPeople)
        {

            sb.AppendLine($"Name: {person.FirstName} {person.LastName}");
            sb.AppendLine($"Type: {person.Type}");
            if (person.DateOfBirth.HasValue)
            {
                sb.AppendLine($"Date of Birth: {person.DateOfBirth.Value.ToShortDateString()}");
            }
            if (!string.IsNullOrEmpty(person.PhoneNumber?.Number))
            {
                sb.AppendLine($"Phone Number: {person.PhoneNumber.Number} [{person.PhoneNumber.Type.ToString()}]");
            }
            AppendLocation(sb, person.Location);
            sb.AppendLine("----------------------------------------------------");
        }

    }

    private void AppendLocation(StringBuilder sb, LocationRecord? reportLocation)
    {
        if (reportLocation == null || string.IsNullOrEmpty(reportLocation.Address))
        {
            return;
        }

        var addressText = new StringBuilder();
        addressText.Append($"Address: {reportLocation.Address}");

        if (!string.IsNullOrEmpty(reportLocation.City))
        {
            addressText.Append($", {reportLocation.City}");
        }

        if (!string.IsNullOrEmpty(reportLocation.State))
        {
            addressText.Append($", {reportLocation.State}");
        }

        if (!string.IsNullOrEmpty(reportLocation.Zip))
        {
            addressText.Append($", {reportLocation.Zip}");
        }

        sb.AppendLine(addressText.ToString());
    }

    private void AppendClearedTime(StringBuilder sb)
    {
        var elapsed = _report.ClearedDate.Value.Subtract(_report.Date.Value);
        int hours = elapsed.Hours;
        int minutes = 0;

        if (elapsed.Minutes != 0)
        {
            var roundedMinutes = (int)(Math.Floor((double)elapsed.Minutes / 15) + 1);
            if (roundedMinutes == 4)
            {
                hours++;
                minutes = 0;
            }

            string minutesText = roundedMinutes switch
            {
                0 => "00",
                1 => "25",
                2 => "50",
                3 => "75",
                _ => "00"
            };
            sb.AppendLine($"Cleared Date: {_report.ClearedDate.FormattedDateTime()} - Elapsed: {hours}.{minutesText}");
        }
    }

    private Task HandleReportStateChanged(IReportRecord report, ReportState value)
    {
        _report.State = (ReportStateEnum)value.Value;

        return Task.CompletedTask;
    }

    private record ReportState(int Value, string Text)
    {
        public override string ToString() => Text;
    }

    static List<ReportState> GetReportStates()
    {
        return Enum.GetValues(typeof(ReportStateEnum)).Cast<ReportStateEnum>().Select(_ => new ReportState((int)_, _.ToString())).ToList();

        //    List<ReportStateEnum> _reportStates = Enum.GetValues(typeof(ReportStateEnum)).Cast<ReportStateEnum>().ToList();
    }

    private ReportState CurrentReportState
    {
        get
        {
            return _reportStates.FirstOrDefault(_ => _.Value == (int)_report.State);
        }
        set => _report.State = (ReportStateEnum)value.Value;
    }

    private void SetReportDates(DateTime? incidentDate, DateTime? clearedDate)
    {
        _incidentDate = incidentDate?.Date;
        _clearedDate = clearedDate?.Date;
        if (incidentDate.HasValue)
        {
            _incidentTime = incidentDate?.TimeOfDay;
        }
        if (clearedDate.HasValue)
        {
            _clearedTime = clearedDate?.TimeOfDay;
        }
    }

    private DateTime? GetIncidentDateTime()
    {
        if (_incidentDate.HasValue)
        {
            var incidentDateTime = _incidentDate.Value;
            if (_incidentTime.HasValue)
            {
                incidentDateTime = incidentDateTime.Add(_incidentTime.Value);
            }
            return incidentDateTime;
        }

        return null;
    }

    private DateTime? GetClearedDateTime()
    {
        if (_clearedDate.HasValue)
        {
            var incidentDateTime = _clearedDate.Value;
            if (_incidentTime.HasValue)
            {
                incidentDateTime = incidentDateTime.Add(_clearedTime.Value);
            }
            return incidentDateTime;
        }

        return null;
    }

    private DateTime? _incidentDate;
    private DateTime? _clearedDate;
    private TimeSpan? _incidentTime;
    private TimeSpan? _clearedTime;

}