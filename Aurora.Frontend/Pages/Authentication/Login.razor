@page "/authentication/login"
@using System.ComponentModel.DataAnnotations
@using System.Security.Claims
@using Aurora.Features.User.AuthenticateUser
@using Aurora.Frontend.Services
@using Aurora.Interfaces.Models
@using Microsoft.AspNetCore.Identity

@inject NavigationManager NavManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject AuthenticationService AuthenticationService

@inject SignInManager<AuroraUser> SigninManager
@inject MediatR.IMediator Mediator

@if (showRegister)
{
    <RegisterUser ReturnUrl="@ReturnUrl" OnShowLogin="ShowLogin" />
}
else
{
    <EditForm Model="@model" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator />
        <MudGrid>
            <MudItem xs="0" sm="3"></MudItem>
            <MudItem xs="12" sm="6">
                <MudCard>
                    <MudCardContent>
                        <MudTextField Label="Username" @bind-Value="model.Username" For="@(() => model.Username)" />
                        <MudTextField Label="Password" @bind-Value="model.Password" For="@(() => model.Password)" InputType="InputType.Password" />
                    </MudCardContent>
                    <MudCardActions>
                        <MudGrid>
                            <MudItem xs="6"><MudButton ButtonType="ButtonType.Submit" Variant="Variant.Text" Color="Color.Primary" Class="ml-auto">Login</MudButton></MudItem>
                            <MudItem xs="6"><MudButton Variant="Variant.Text" StartIcon="@Icons.Material.Filled.Person" Color="Color.Primary" @onclick="Register">Create Account</MudButton></MudItem>
                        </MudGrid>
                    </MudCardActions>
                </MudCard>
            </MudItem>
        </MudGrid>
    </EditForm>
}

@code {
    [Parameter]
    public string ReturnUrl { get; set; }

    bool showRegister = false;

    RegisterAccountForm model = new ();
    bool success;

    public class RegisterAccountForm
    {
        [Required]
        public string Username { get; set; }

        [Required]
        public string Password { get; set; }

    }

    private async Task OnValidSubmit(EditContext context)
    {
        var command = new AuthenticateUserCommand()
        {
            UserName = model.Username,
            Password = model.Password
        };

        var result = await Mediator.Send(command);
        if (result.Success)
        {
            var identity = AuthenticationService.GetClaimsIdentity(result.IdentityUser, result.Token);

            var newUser = new ClaimsPrincipal(identity);
            AuthenticationService.CurrentUser = newUser;

            if (string.IsNullOrEmpty(ReturnUrl) || ReturnUrl.IndexOf("?returnUrl=", StringComparison.InvariantCulture) <= 0)
            {
                NavManager.NavigateTo("/");
                return;
            }

            var returnUrl = ReturnUrl.Substring(ReturnUrl.IndexOf("?returnUrl=", StringComparison.InvariantCultureIgnoreCase));
            NavManager.NavigateTo(returnUrl);
        }
        else
        {
            success = false;
        }
    }

    private void Register()
    {
        showRegister = true;
    }

    private void ShowLogin()
    {
        showRegister = false;
    }

}